help:PhysiCalc is a calculating tool designed for physicists.|It has many capabilities including uncertainty calculations, automatic unit handling and conversion,
# and many built-in physical constants.||If you are just getting started with PhysiCalc, type "help getting started" for a quick starter-guide with examples.||
#If you need help with a specific issue, type "help list" to see a list of help pages.

help getting started:For those of you who are new, here is a quick guide.|(Note: If you want to follow along with the examples, you can open another instance of PhysiCalc and use that.)||
#Let's start with the basics: simple mathematical calculations. In PhysiCalc, mathematical operations are performed by structures called
# "expressions". The simplest expressions are just single numbers.||    Ex: Type "1" (whenever I tell you to type something in, always ignore the quotes) and press enter. PhysiCalc will just echo
# the same number back to you: "1.0±0.0". Notice the "±0.0", this will be covered later, for now you can just ignore it. Whenever you finish
# typing something in, you must hit enter to tell PhysiCalc to start processing your request.||Okay, that's fine, but we want to actually do math.
# Operations in PhysiCalc are written in what is called "Reverse Polish Notation" or RPN. Operations in RPN are placed after their operands.||
#    Ex: Type "1 1 +". This will add 1 + 1 and will output 2.||There are five operations in PhysiCalc: addition (+), subtraction (-), multiplication (* or x), division (/),
# and exponentiation (^). All of these operations are in RPN, except for exponentiation, which behaves a little differently.||I said you can perform multiple operations at once
# and I wasn't lying. While typing an expression, the output of one operation can be the operand of another operation.||    Ex: Type "1 1 + 5 *". This expression reads the "1 1 +"
# and calculates "2". This then becomes the first operand of the multiplication, which outputs 10.||As mentioned previously, exponentiation is treated differently than other
# operations. This is because they are treated as unary operators, which ony take one operand. To exponentiate in PhysiCalc, you just type the operand followed by the carrot symbol
# IMMEDIATELY (no space) followed by the exponent. Only integer exponents are supported.||    Ex: Type "5 ^2". This will square 5 and output 25. Now type "0.5 ^3".
# This will cube 0.25, giving 0.125.||Now that you have mastered expressions, you can move on to more advanced topics. Type "help list" to see all the pages of help available. To
# access a page, type "help" followed by the page's name.

help list:List of help pages, it is recommended that you read them in the order listed:||
#  The Basics:||
#    getting started: If you are new to PhysiCalc, this is a great place to start learning.||
#    uncertainty: No measurements are exact, and some are more certain than others. Uncertainty allows you to express this in your data and read it from your results.||
#    scientific notation: The mass of the sun is 1988470000000000000000000000000 kg. There must be a better way to write this.||
#    units: Units tell you what you are measuring, and allow you to express your results in more meaningful terms.||
#    number formatting: The past few pages have all discussed different aspects of formatting numbers. There are many ways you can write your numbers in PhysiCalc, this page shows a few different combinations.||
#    expression format: There are several guidelines you need to follow for your expressions to parse properly.||
#    the list command:
#  Advanced:||
#    labels - Labels allow you to easily store and reuse values you have calculated.||
#    expression debugging - Sometimes error messages aren't caused by what they seem to be. Here are a few problems that you might run into writing expressions.||

help uncertainty:Uncertainty is a measure of how accurate you believe your measurement is. It is usually expressed as a range above and below a center value. For example, 5.5±0.5 means that you are certain that the value
# lies between 5 and 6. In PhysiCalc, numbers are written in the same way except the "±" character can be replaced with "+-" since it is not on most keyboards.||Uncertainty is propagated during calculations, so any values calculated
# from uncertain will have an uncertainty that represents the uncertainty in your initial values.||For those of you interested in the math, the uncertainties of sums and differences are simply the sums of the uncertainties of the operands.
# For multiplication and division, the uncertainties are converted into percentages and then added and converted back for the final uncertainties. The uncertainty of the result of an exponentiation is the percent uncertainty of the operand
# multiplied by the exponent.

help scientific notation:Scientific notation is a technique for representing very large and very small numbers in a compact and efficient way. In scientific notation, a number is represented as a coefficient multiplied by a power of ten:
# 2.5*10^2, for example, is 250. Notice that the exponent can be very large and positive to represent large numbers, such as the mass of the sun, which is 1988470000000000000000000000000 (or 1.98847x10^30) kilograms, as well as very large and negative
# to represent very small numbers, such as the plank length, which is 0.00000000000000000000000000000000001616255 (1.616255*10−35) m. In PhysiCalc, scientific can be written in three ways: "x10^", "*10^", and "E". "x10^" and "*10^" are exactly the
# same except for the symbol used for multiplication: 1.23x10^4 or 1.23*10^4. The third is often called "big E notation". It is common in many simpler calculators, just insert a capital "E" between the coefficient and the exponent: 1.23E4.||
#All three of these notations are equally good, so it is up to you to chose which one you use. PhysiCalc always prints out its output using big E notation.

help units:Units are the means of denoting what a value represents. There are literally dozens of different units. However, most of them fall into a few different categories:||
#    Metric Units - The metric system is the standard for all scientific study. Its most common basic units are the meter (m), the kilogram (km), and the second (s).||
#    Imperial Units - The Imperial System is a very old system of units that is falling out of favor due to the rising popularity of metric units. However, they are still quite common in some places, so they are useful to know.
# Some common imperial units are the foot (ft), the pound (lbs), and the second (which is also a metric unit).||
#    "Natural" Units - These units are based on the properties of objects around us. Common ones are years (yr), Solar Masses (solarMass), and astronomical units (AU). They are often considered quite imprecise because of their nature,
# so they aren't often used for very precise measurements. They are normally used to put very large or small measurements in context by comparing them to more familiar quantities. (Jupiter is about 5.2 AU from the sun, meaning it is 5.2 times
# farther than the Earth. This is much more understandable that saying it is 778000000 km from the sun.)||
# You may have noticed the parenthesis following each unit. These parenthesis contain what is called the abbreviation for the unit. This is a way of representing the unit without having to type out its full name. The abbreviation for
# meters is "m", seconds is "s", etc. PhysiCalc only accepts the abbreviations for units, so it is a good idea to familiarize yourselves with them.||
#Some units, especially metric units, can be modified with a prefix. This changes the size of the unit to a larger or smaller value. For example, 1m (one meter) is a pretty small unit, but with the prefix "k", it becomes 1km, or one kilometer,
# which is equivalent to 1000m. The most common prefixes are "k" (kilo-, thousand times larger), "M" (mega-, million times larger), "G" (giga-, billion times larger), "T" (tera-, trillion times larger), "c" (centi-, hundred times smaller, normally only used in cm, or centimeters)
#, "m" (milli-, thousand times smaller), "μ" (micro-, million times smaller), "n" (nano-, billion times smaller), and "p" (pico-, trillion times smaller). With these prefixes, a single unit such as a meter, can easily show the size of an atom (50 picometers),
# and the distance between the Sun and Saturn (1.4 Tm).||
#Units can be multiplied and divided with each other to create new units. For example, meters can be divided by seconds to create m/s, a unit of velocity. These units are called "derived units". In PhysiCalc, multiplying units is done by placing them right next to each other
# as in sm (second-meters), any units in th denominator are placed after a slash (/), like so: m/s. Units can also be raised to a power using the carrot symbol (^): m^3||
#Some derived units are so common that they are given their own name and abbreviation. One example of such a unit is a Newton (N), which is equivalent to kgm/s^2. If the result of a calculation can be expressed using such a unit, it will be done to automatically.||
#If you need a measurement in specific units. You can use the "in" keyword: 1m/s in mi/hr will convert 1 meter per second into miles per hour. You can only convert to a unit that denotes the same type of quantity. Trying to do otherwise results in the
# calculator giving an error message.

help number formatting:

